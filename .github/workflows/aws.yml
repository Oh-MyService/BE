name: Deploy FastAPI and RabbitMQ to Amazon Lightsail

on:
  push:
    branches: [ "main" ]

env:
  AWS_REGION: us-east-1
  LIGHTSAIL_INSTANCE_IP: ${{ secrets.LIGHTSAIL_INSTANCE_IP }}
  SSH_USERNAME: ${{ secrets.SSH_USERNAME }}
  SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR Public
      id: login-ecr-public
      uses: aws-actions/amazon-ecr-login@v1
      with:
        registry-type: public

    - name: Build, tag, and push images to Amazon ECR Public
      id: build-images
      env:
        REGISTRY: ${{ steps.login-ecr-public.outputs.registry }}
        REGISTRY_ALIAS: d0v2k3o3 # 본인의 alias 입력
        BACKEND_REPOSITORY: ohmyservice_backend # FastAPI repository명
        RABBITMQ_REPOSITORY: ohmyservice_rabbitmq # RabbitMQ repository명 (새로 추가)
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build and push FastAPI image
        docker build --no-cache -t $REGISTRY/$REGISTRY_ALIAS/$BACKEND_REPOSITORY:$IMAGE_TAG .
        docker push $REGISTRY/$REGISTRY_ALIAS/$BACKEND_REPOSITORY:$IMAGE_TAG

        # Build and push RabbitMQ image (Assuming a Dockerfile exists for RabbitMQ)
        docker build --no-cache -t $REGISTRY/$REGISTRY_ALIAS/$RABBITMQ_REPOSITORY:$IMAGE_TAG -f Dockerfile.rabbitmq .
        docker push $REGISTRY/$REGISTRY_ALIAS/$RABBITMQ_REPOSITORY:$IMAGE_TAG

        echo "backend_image=$REGISTRY/$REGISTRY_ALIAS/$BACKEND_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
        echo "rabbitmq_image=$REGISTRY/$REGISTRY_ALIAS/$RABBITMQ_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Install SSH client
      run: sudo apt-get install -y openssh-client

    - name: Copy SSH key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa

    - name: Copy .env file to Lightsail instance
      run: |
        scp -o StrictHostKeyChecking=no .env $SSH_USERNAME@$LIGHTSAIL_INSTANCE_IP:/home/$SSH_USERNAME/.env

    - name: Deploy to Amazon Lightsail
      env:
        BACKEND_IMAGE: ${{ steps.build-images.outputs.backend_image }}
        RABBITMQ_IMAGE: ${{ steps.build-images.outputs.rabbitmq_image }}
      run: |
        ssh -o StrictHostKeyChecking=no $SSH_USERNAME@$LIGHTSAIL_INSTANCE_IP << EOF
          BACKEND_IMAGE=${BACKEND_IMAGE}
          RABBITMQ_IMAGE=${RABBITMQ_IMAGE}
          
          # Pull the images
          sudo docker pull \\$BACKEND_IMAGE
          sudo docker pull \\$RABBITMQ_IMAGE

          # Stop and remove existing containers
          sudo docker stop fastapi_app || true
          sudo docker rm fastapi_app || true
          sudo docker stop rabbitmq || true
          sudo docker rm rabbitmq || true

          # Run new containers
          sudo docker run -d --name fastapi_app --env-file /home/$SSH_USERNAME/.env -p 28282:8000 \\$BACKEND_IMAGE
          sudo docker run -d --name rabbitmq -p 15672:15672 -p 5672:5672 \\$RABBITMQ_IMAGE
        EOF
